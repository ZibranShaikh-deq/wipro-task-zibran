{"version":3,"sources":["common/Header/index.js","common/Footer/index.js","common/Layout/index.js","constants/staticText.js","service/api.js","common/SearchBox/index.js","components/Home/index.js","components/App/index.js","serviceWorker.js","utils/history.js","index.js"],"names":["Header","Navbar","bg","expand","className","Brand","href","Footer","props","Layout","useState","window","scrollY","isScrolled","setScroll","useEffect","document","addEventListener","handleScroll","removeEventListener","Y","class","showBackground","children","Texts","SEARCH","PLACEHOLDER","ERROR_MESSAGE","getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","Search","suggestions","setSuggestions","value","setValue","showOptions","setShowOptions","activeOptionIndex","setActiveOptionIndex","inputRef","useRef","node","handleClick","e","current","contains","target","searchValueArray","split","lastWord","length","handleOnFocus","searchedValue","a","options","filteredOptions","filter","item","debouncedInputChange","useCallback","debounce","handleInputChange","event","preventDefault","latestSearchValueArray","handleOnClick","finalValue","toString","replace","focus","handleKeyPress","activeIndex","keyCode","Form","Group","Label","ref","Control","type","autoComplete","placeholder","onChange","onFocus","onKeyDown","map","index","key","onClick","Home","App","console","log","process","Boolean","location","hostname","match","createBrowserHistory","ReactDOM","render","fallback","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8b99d49.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nimport './header.css'\n\n//Component for Common Header\nconst Header = () => {\n  //Return JSX for Header\n  return (\n    <Navbar bg=\"light\" expand=\"lg\" className=\"header\">\n      <Navbar.Brand href=\"/home\">Search is in our DNA</Navbar.Brand>\n    </Navbar>\n  )\n}\n\nHeader.propTypes = {\n}\n\nexport default Header\n","import React from 'react'\n\nimport './footer.css'\n\n//Component for Common Footer\nconst Footer = (props) => (\n  <footer className=\"app-footer\" >\n  <div>\n    <span>ABC</span>\n    <span>&copy; 2020 ABC.</span>\n  </div>\n  <div className=\"ml-auto\">\n    <span>Powered by ABC</span>\n  </div>\n</footer>\n)\n\nexport default Footer\n","import React, { Fragment, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Header from '../Header'\nimport Footer from '../Footer'\n\n//Component for return the reusable Layout.\nconst Layout = (props) => {\n  const [isScrolled, setScroll] = useState(window.scrollY > 30)\n  //Hooks for adding the Scroll event.\n  useEffect(() => {\n    document.addEventListener('scroll', handleScroll)\n    return () => {\n      document.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  //Function for Scroll.\n  const handleScroll = () => {\n    const Y = window.scrollY\n    setScroll(Y > 30)\n  }\n\n  //Return the JSX for Layout.\n  return (\n    <Fragment>\n      <Header class=\"pt-10\" showBackground={isScrolled} />\n      <Fragment>\n        {props.children}\n      </Fragment>\n      <Footer />\n    </Fragment>\n  )\n}\n\n//Proptypes of Layout component.\nLayout.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.array,\n    PropTypes.object])\n}\n\nexport default Layout\n","//Commonly Used Text\nconst Texts = {\n  SEARCH: 'Search',\n  PLACEHOLDER: 'Enter text for search',\n  ERROR_MESSAGE: 'Something Went Wrong',\n}\n\nexport default Texts\n\n","// ================================= Mock Server Start =============================\nvar FAILURE_COEFF = 10;\nvar MAX_SERVER_LATENCY = 200;\n\nexport const getRandomBool = (n) => {\n  var maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nexport const getSuggestions = (text) => {\n  var pre = 'pre';\n  var post = 'post';\n  var results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    var randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n// ================================= Mock Server End =============================","import React, { useState, useRef, useEffect, useCallback } from 'react'\nimport { Form } from 'react-bootstrap'\n\nimport Texts from 'constants/staticText'\nimport { getSuggestions } from \"service/api\"\nimport { debounce } from \"lodash\";\n\nimport './index.css'\n\n//Component For Resuable Search Box\nconst Search = () => {\n  const [ suggestions, setSuggestions ] = useState([])\n  const [ value, setValue ] = useState(\"\")\n  const [ showOptions, setShowOptions ] = useState(false)\n  const [ activeOptionIndex, setActiveOptionIndex ] = useState(null)\n  \n  const inputRef = useRef()\n  const node = useRef();\n\n  //Function For Handle Click Out of Div Event\n  const handleClick = e => {\n    if (!node.current.contains(e.target)) {\n      setShowOptions(false)\n    }\n  };\n\n  //Hooks For adding Mouse Event\n  useEffect(() => {\n    // add when mounted\n      document.addEventListener(\"mousedown\", handleClick);\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  //Variables for value which is used in component. \n  const searchValueArray = value.split(\" \")\n  const lastWord = searchValueArray[searchValueArray.length - 1]\n  \n  //Function for handle the focus event for input box.\n  const handleOnFocus = async (searchedValue) => {\n    const searchValueArray = searchedValue.split(\" \")\n    if(searchValueArray){\n      const options = await getSuggestions(searchValueArray[searchValueArray.length - 1])\n      if(options && options.length > 0){\n        const filteredOptions = options.filter(item => item !== \"\")\n        setSuggestions(filteredOptions)\n        setShowOptions(true)\n        setActiveOptionIndex(null)\n      }\n    }\n  }\n  \n  //Debounce On change handler  \n  const debouncedInputChange = useCallback(debounce(handleOnFocus, 500), [])\n\n  //Function for hanlding change in the state.\n  const handleInputChange = (event) => {\n    event.preventDefault()\n    const searchedValue = event.target.value\n    setValue(searchedValue)\n    let latestSearchValueArray = searchedValue.split(\" \")\n    if(lastWord !== latestSearchValueArray[latestSearchValueArray.length - 1]){\n      debouncedInputChange(searchedValue)\n    }else{\n      setShowOptions(false)\n    }\n  }\n  \n  //Function for handling the onclick event of the options.\n  const handleOnClick = (item) => {\n    let searchValueArray = value.split(\" \")\n    if(searchValueArray || item){\n      searchValueArray[searchValueArray.length - 1] = item\n      let finalValue = searchValueArray.toString().replace(/,/g, \" \")\n      setShowOptions(false)\n      setValue(finalValue+\" \")\n      setActiveOptionIndex(null)\n      inputRef.current.focus()\n    }\n  }\n\n  //Function For render the Suggestions/Options\n  const renderOptions = () => {\n    if(showOptions && suggestions && suggestions.length > 0){\n      return (\n        <div className=\"option-div\">\n          {suggestions.map((item, index) => {\n              if(item){\n                return (\n                  <option \n                    key={item}\n                    className={`option ${item === lastWord ? \"highlight-color\" : \"\"} \n                    ${activeOptionIndex === index ? \"active-option\" : \"\"}`} \n                    onClick={() => handleOnClick(item)}\n                  >\n                    {item}\n                  </option>\n                )\n              }\n              return null\n            })\n          }\n        </div>\n      )\n    } \n    return null\n  }\n\n  //Function for handle Key press\n  const handleKeyPress = (event) => {\n    let activeIndex = activeOptionIndex === null ? 0 : activeOptionIndex\n    switch(event.keyCode){\n      case 38:\n        if(activeIndex !== -1){\n          --activeIndex\n          setActiveOptionIndex(activeIndex)\n        }\n        break;\n      case 40:\n        if(activeIndex < suggestions.length - 1){\n          activeIndex = activeOptionIndex === null ? activeIndex : ++activeIndex\n          setActiveOptionIndex(activeIndex)\n        }\n        break;\n      case 13:\n        event.preventDefault()\n        activeOptionIndex !== null && handleOnClick(suggestions[activeOptionIndex])\n        break;\n      default:\n        return;\n    }\n  }\n\n  //Function For render the Custom Search Box.\n  const renderSearchBox = () => {\n    return (\n      <Form.Group>\n        <Form.Label>{Texts.SEARCH}</Form.Label>\n        <div ref={node}>\n          <Form.Control \n            ref={inputRef}\n            type=\"text\" \n            autoComplete=\"off\"\n            placeholder={Texts.PLACEHOLDER}\n            onChange={handleInputChange}\n            value={value}\n            onFocus={() => !activeOptionIndex && !value && handleOnFocus(\"\")}\n            onKeyDown={handleKeyPress}\n          >\n          </Form.Control>\n          {renderOptions()}\n        </div>\n      </Form.Group>\n    )\n  }\n\n  //Return the JSX of SerchBox.\n  return (\n    <div className=\"parent-container\">\n\t\t\t<Form >\n\t\t\t\t{renderSearchBox()}\n\t\t\t</Form>\n    </div>\n  )\n}\n\nSearch.propTypes = {\n}\n\nexport default Search\n","import React from 'react'\n\nimport Layout from 'common/Layout'\nimport SearchBox from 'common/SearchBox'\n\nimport './index.css'\n\n//Home component for Rendering the SearchBox with Layout.\nconst Home = () => {\n  return (\n    <Layout>\n      <SearchBox />\n    </Layout>\n  )\n}\n\nHome.propTypes = {\n}\n\nexport default Home\n","import React, { Fragment } from 'react'\nimport { Route, Redirect, Switch } from 'react-router-dom'\n\nimport HomeContainer from '../Home'\nimport { APP_ROUTES } from \"utils/enum\"\n\n//App Component For Routing.\nconst App = () => {\n  console.log(\"process.env\", process.env)\n  return (\n    <Fragment>\n      {/* <Switch> */}\n        {/* <Redirect exact from={APP_ROUTES.ROOT} to={APP_ROUTES.HOME} /> */}\n        {/* <Route exact path={APP_ROUTES.ROOT} component={HomeContainer} /> */}\n        <HomeContainer />\n      {/* </Switch> */}\n    </Fragment>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router } from 'react-router-dom'\n\nimport App from 'components/App'\nimport * as serviceWorker from './serviceWorker'\nimport browserHistory from 'utils/history'; \n\nimport './index.css'\n\nReactDOM.render((\n  // <Router basename={process.env.PUBLIC_URL} history={browserHistory}>\n    <Suspense fallback={'Loading...'}>\n      <App />\n    </Suspense>\n  // </Router>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n"],"sourceRoot":""}