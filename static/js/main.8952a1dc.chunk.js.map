{"version":3,"sources":["common/Header/index.js","common/Footer/index.js","common/Layout/index.js","constants/staticText.js","service/api.js","common/SearchBox/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","expand","className","Brand","Footer","props","Layout","useState","window","scrollY","isScrolled","setScroll","useEffect","document","addEventListener","handleScroll","removeEventListener","Y","class","showBackground","children","Texts","SEARCH","PLACEHOLDER","ERROR_MESSAGE","getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","SearchBox","suggestions","setSuggestions","value","setValue","showOptions","setShowOptions","activeOptionIndex","setActiveOptionIndex","inputRef","useRef","node","handleClick","e","current","contains","target","searchValueArray","split","lastWord","length","handleOnFocus","searchedValue","a","searchedText","pop","options","console","error","debouncedInputChange","useCallback","debounce","handleOnClick","item","join","concat","focus","Form","Group","Label","ref","Control","type","autoComplete","placeholder","onChange","event","preventDefault","lastElementOfSearchedValue","onKeyDown","keyCode","map","index","key","onClick","App","Boolean","location","hostname","match","ReactDOM","render","fallback","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8952a1dc.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nimport './header.css'\n\n//Component for Common Header\nconst Header = () => {\n  //Return JSX for Header\n  return (\n    <Navbar bg=\"light\" expand=\"lg\" className=\"header\">\n      <Navbar.Brand>Search is in our DNA</Navbar.Brand>\n    </Navbar>\n  )\n}\n\nHeader.propTypes = {\n}\n\nexport default Header\n","import React from 'react'\n\nimport './footer.css'\n\n//Component for Common Footer\nconst Footer = (props) => (\n  <footer className=\"app-footer\" >\n  <div>\n    <span>ABC</span>\n    <span>&copy; 2020 ABC.</span>\n  </div>\n  <div className=\"ml-auto\">\n    <span>Powered by ABC</span>\n  </div>\n</footer>\n)\n\nexport default Footer\n","import React, { Fragment, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Header from '../Header'\nimport Footer from '../Footer'\n\n//Component for return the reusable Layout.\nconst Layout = (props) => {\n  const [isScrolled, setScroll] = useState(window.scrollY > 30)\n  //Hooks for adding the Scroll event.\n  useEffect(() => {\n    document.addEventListener('scroll', handleScroll)\n    return () => {\n      document.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  //Function for Scroll.\n  const handleScroll = () => {\n    const Y = window.scrollY\n    setScroll(Y > 30)\n  }\n\n  //Return the JSX for Layout.\n  return (\n    <Fragment>\n      <Header class=\"pt-10\" showBackground={isScrolled} />\n      <Fragment>\n        {props.children}\n      </Fragment>\n      <Footer />\n    </Fragment>\n  )\n}\n\n//Proptypes of Layout component.\nLayout.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.array,\n    PropTypes.object])\n}\n\nexport default Layout\n","//Commonly Used Text\nconst Texts = {\n  SEARCH: 'Search',\n  PLACEHOLDER: 'Enter text for search',\n  ERROR_MESSAGE: 'Something Went Wrong',\n}\n\nexport default Texts\n\n","// ================================= Mock Server Start =============================\nvar FAILURE_COEFF = 10;\nvar MAX_SERVER_LATENCY = 200;\n\nexport const getRandomBool = (n) => {\n  var maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nexport const getSuggestions = (text) => {\n  var pre = 'pre';\n  var post = 'post';\n  var results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    var randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n// ================================= Mock Server End =============================","import React, { useState, useRef, useEffect, useCallback } from 'react'\nimport { Form } from 'react-bootstrap'\n\nimport Texts from 'constants/staticText'\nimport { getSuggestions } from \"service/api\"\nimport { debounce } from \"lodash\";\n\nimport './index.css'\n\n// Component For Resuable Search Box\nconst SearchBox = () => {\n  const [ suggestions, setSuggestions ] = useState([])\n  const [ value, setValue ] = useState(\"\")\n  const [ showOptions, setShowOptions ] = useState(false)\n  const [ activeOptionIndex, setActiveOptionIndex ] = useState(0)\n  \n  const inputRef = useRef()\n  const node = useRef();\n\n  // Function For Handle Click Out of Div Event\n  const handleClick = e => {\n    if (!node.current.contains(e.target)) {\n      setShowOptions(false)\n    }\n  };\n\n  // Hooks For adding Mouse Event\n  useEffect(() => {\n    // Not manipulating the DOM, Listening to events.\n      document.addEventListener(\"mousedown\", handleClick);\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  // Variables for value which is used in component. \n  const searchValueArray = value.split(\" \")\n  const lastWord = searchValueArray[searchValueArray.length - 1]\n  \n  // Function for handle the focus event for input box.\n  const handleOnFocus = async (searchedValue) => {\n    const searchedText = searchedValue.split(\" \").pop()\n    if(searchedText){\n      try {\n        const options = await getSuggestions(searchedText)\n        setSuggestions(options)\n        setShowOptions(true)\n        setActiveOptionIndex(0)\n      } catch (error) {\n        console.error('Got error in receiving data:  ', error)\n      }\n    }\n  }\n  \n  // Debounce On change handler  \n  const debouncedInputChange = useCallback(debounce(handleOnFocus, 500), [])\n\n  // Function for hanlding change in the state.\n  const handleInputChange = (event) => {\n    event.preventDefault()\n\n    const searchedValue = event.target.value\n\n    setValue(searchedValue)\n    const lastElementOfSearchedValue = searchedValue.split(\" \").pop()\n    \n    if (lastWord !== lastElementOfSearchedValue) {\n      debouncedInputChange(searchedValue)\n    } else{\n      setShowOptions(false)\n    }\n  }\n  \n  // Function for handling the onclick event of the options.\n  const handleOnClick = (item) => {\n    const searchValueArray = value.split(\" \")\n\n    if(searchValueArray || item) {\n      searchValueArray[searchValueArray.length - 1] = item\n        \n      setShowOptions(false)\n      setValue(searchValueArray.join(' ').concat(' '))\n      setActiveOptionIndex(0)\n    \n      inputRef.current.focus()\n    }\n  }\n\n  // Function for handle Key press\n  const handleKeyPress = (event) => {\n    switch(event.keyCode){\n      case 38:\n        event.preventDefault()\n        if(activeOptionIndex > 0){\n          setActiveOptionIndex(activeOptionIndex - 1)\n        }\n        return;\n      case 40:\n        event.preventDefault()\n        if(activeOptionIndex < suggestions.length - 1){\n          setActiveOptionIndex(activeOptionIndex + 1)\n        }\n        return;\n      case 13:\n        event.preventDefault()\n        if (showOptions) {\n          handleOnClick(suggestions[activeOptionIndex])\n        }\n        return;\n      default:\n        return;\n    }\n  }\n\n  //Return the JSX of SerchBox.\n  return (\n    <div className=\"parent-container\">\n\t\t\t<Form >\n        <Form.Group>\n          <Form.Label>{Texts.SEARCH}</Form.Label>\n          <div ref={node}>\n            <Form.Control \n              ref={inputRef}\n              type=\"text\" \n              autoComplete=\"off\"\n              placeholder={Texts.PLACEHOLDER}\n              onChange={handleInputChange}\n              value={value}\n              onKeyDown={handleKeyPress}\n            >\n            </Form.Control>\n            {showOptions && suggestions && suggestions.length > 0 && (\n              <div className=\"option-div\">\n                {suggestions.map((item, index) => (\n                  <option \n                    key={item}\n                    className={`option ${item === lastWord ? \"highlight-color\" : \"\"} \n                    ${activeOptionIndex === index ? \"active-option\" : \"\"}`} \n                    onClick={() => handleOnClick(item)}\n                  >\n                    {item}\n                  </option>\n                ))}\n              </div>\n            )}\n          </div>\n        </Form.Group>\n\t\t\t</Form>\n    </div>\n  )\n}\n\nSearchBox.propTypes = {}\n\nexport default SearchBox\n","import React, { Fragment } from 'react'\n\nimport Layout from 'common/Layout'\nimport SearchBox from 'common/SearchBox'\n\n//App Component.\nconst App = () => {\n  return (\n    <Fragment>\n      <Layout>\n        <SearchBox />\n      </Layout>\n    </Fragment>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from 'components/App'\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\nReactDOM.render((\n  <Suspense fallback={'Loading...'}>\n    <App />\n  </Suspense>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n"],"sourceRoot":""}